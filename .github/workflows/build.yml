name: Check and Build
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  release:
    types: [released]
permissions: read-all
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Debug flags
        shell: bash
        if: runner.debug == '1'
        run: echo 'FLAGS=-d' >> "$GITHUB_ENV"
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Lint code
        run: make ${{ env.FLAGS }} lint format
  test:
    name: Test ${{ matrix.os }}.${{ matrix.python }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python:
          - '3.11'
          - '3.12'
    steps:
      - name: Debug flags
        shell: bash
        if: runner.debug == '1'
        run: echo 'FLAGS=-d' >> "$GITHUB_ENV"
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install coreutils for macOS
        if: matrix.os == 'macos'
        run: brew install coreutils
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Install wheel
        run: pip install wheel
      - name: Cache test files
        uses: actions/cache@v4
        with:
          path: |
            .venv/bin/codexctl.*
            .venv/*_reMarkable2-*.signed
          key: test-files-${{ hashFiles('Makefile') }}
      - name: Run tests
        shell: bash
        run: make ${{ env.FLAGS }} test
  build-wheel:
    name: Build ${{ matrix.os}}.${{ matrix.python }} wheel
    needs: [lint,test]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python:
          - '3.11'
          - '3.12'
    steps:
      - name: Debug flags
        shell: bash
        if: runner.debug == '1'
        run: echo 'FLAGS=-d' >> "$GITHUB_ENV"
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      - name: Install wheel
        run: pip install wheel
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install coreutils for macOS
        if: matrix.os == 'macos'
        run: brew install coreutils
      - name: Building package
        shell: bash
        run: make ${{ env.FLAGS }} wheel
      - uses: actions/upload-artifact@v4
        with:
          name: pip-wheel-${{ matrix.os }}-${{ matrix.python }}
          path: dist/*
          if-no-files-found: error
  build-sdist:
    name: Build sdist
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Debug flags
        shell: bash
        if: runner.debug == '1'
        run: echo 'FLAGS=-d' >> "$GITHUB_ENV"
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install wheel
        run: pip install wheel
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Building package
        shell: bash
        run: make ${{ env.FLAGS }} sdist
      - uses: actions/upload-artifact@v4
        with:
          name: pip-sdist
          path: dist/*
          if-no-files-found: error
  publish:
    name: Publish to PyPi
    if: github.repository == 'Eeems/remarkable-update-image' && github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    needs: [build-sdist]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - 'pip-sdist'
          - 'pip-wheel-macos-3.11'
          - 'pip-wheel-macos-3.12'
          - 'pip-wheel-windows-3.11'
          - 'pip-wheel-windows-3.12'
    permissions:
      id-token: write
      contents: write
    environment:
      name: pypi
      url: https://pypi.org/p/remarkable_update_image
    steps:
      - name: Download artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ steps.download.outputs.download-path }}
          skip-existing: true
  release:
    name: Add ${{ matrix.artifact }} to release
    if: github.repository == 'Eeems/remarkable-update-image' && github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    needs:
      - build-wheel
      - build-sdist
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact:
          - 'pip-sdist'
          - 'pip-wheel-ubuntu-3.11'
          - 'pip-wheel-ubuntu-3.12'
          - 'pip-wheel-macos-3.11'
          - 'pip-wheel-macos-3.12'
          - 'pip-wheel-windows-3.11'
          - 'pip-wheel-windows-3.12'
    permissions:
      contents: write
    steps:
      - name: Checkout the Git repository
        uses: actions/checkout@v4
      - name: Download executable
        id: download
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist
      - name: Upload to release
        run:
          find . -type f | xargs -rI {} gh release upload "$TAG" {} --clobber
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.release.tag_name }}
        working-directory: ${{ steps.download.outputs.download-path }}
